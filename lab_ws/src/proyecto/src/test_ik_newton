#!/usr/bin/env python
 
import rospy
from sensor_msgs.msg import JointState
from markers import *
from funciones import *
 
# Creacion del nodo para publicar los valores articulares al robot RViz y hacer que se mueva
rospy.init_node("testInvKine")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
 
bmarker = BallMarker(color['RED']) # Creacion del marcador rojo que se posiciona en la posicion del efector final, hallada mediante cinematica directa
bmarker_des = BallMarker(color['GREEN'])# Creacion del marcador verde que se posiciona en la posicion deseada ingresada
 
# Nombres de las articulaciones del robot movil
# Se incluyen las articulaciones de las ruedas, ya que se les debe pasar algun valor para que se posicionen en sus ejes respectivos
jnames = ['q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q7', 'q01', 'q02', 'q03', 'q04']
# Posicion deseada en la que se ubica el marcador verde y a la que debe llegar el efector final (VALORES MODIFICABLES)
xd = np.array([-0.7, -1.3, 0.7])
# Configuracion inicial (q de partida para el proceso iterativo)
q0 = np.array([0, 1.9, 0, 2.9, 0.13, 2.6, 0, 0, 0, 0, 0])
# Cinematica inversa por Newton-Rhapson
q = ikine(xd, q0[0:7])  # Se otienen los valores articulares para el robot manipulador
qc = np.concatenate((q, np.array([0, 0, 0, 0])), axis=None) # Se agregan los valores articulares del robot movil para el robot
 
# Se halla la matriz de tranasformacion homogenea a partir de los valores articulares hallados mediante cinematica inversa para comprobar si se llego a la posicion deseada a partir del componente de posicion
T = fkine(q)
print('q: ')
# Se halla el modulo de los valores articulares, ya que las articulaciones rotacionales podrian dar mas de una vuelta. Este calculo es valido debido a que si una articulacion rotacional da una vuelta completa seria lo mismo que no dar ninguna
print(np.round((np.abs(q) % (2*pi))*np.sign(q), 3)) 
print('Obtained value: ') # Se imprime la posicion del efector final hallada mediante cinematica directa a partir de los valores articulares obtenidos
print(np.round(T, 3))
 
bmarker.xyz(T[0:3, 3])  # Se posiciona el marcador rojo en la posicion del efector final hallada mediante cinematica directa
bmarker_des.xyz(xd) # Se posiiona el marcador verde en la posicion deseada ingreada
 
# Se crea el mensaje de tipo JointState
jstate = JointState()
# Se proporcionan los valores necesarios del mensaje
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames # Se pasan los nombres de las articulaciones al mensaje
jstate.position = qc # Se pasan los valores articulares al mensaje
 
# Frecuencia de ejecucion del bucle (Hz)
rate = rospy.Rate(100)
 
# Bucle de ejecucion
while not rospy.is_shutdown():
    # Tiempo actual (Requerido para ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publicacion del mensaje
    pub.publish(jstate)  # Se publican los valores articulares al robot en RViz para modificar el valores de las articulaciones y posicionar el robot en la configuracion acorde a estos valores
    bmarker.publish()   # Se publica el marcador rojo, que muestra la ubicacion del efector final de acuerdo al calculo de cinematica directa por Denavit-Hartenbeg a partir de los valores q obtenidos mediante cinematica inversa
    bmarker_des.publish() # Se publica el marcador verde, que muestta la ubicacion deseada
    '''
    Para comprobar que el calculo de cinematica inversa a partir de valores articulares es correcto, el marcador rojo, cuya 
    posicion fue calculada, y el efector final, deben estar ubicados en la misma posicion que el marcador verde que indica
    la posicion deseada ingresada.
    '''
    # Espera a la siguiente iteracion siguiendo la frecuencia de ejecucion
    rate.sleep()
